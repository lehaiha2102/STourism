import React, { useEffect, useState } from 'react';
import { connect } from 'react-redux';
import { RouteComponentProps, useHistory } from 'react-router-dom';
import { Badge, Button, Col, Label, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';
import { Translate } from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { IRootState } from 'app/shared/reducers';
import { getBookingRooms, getEntity } from './my-room.reducer';
import { RoomStatus, RoomStatus as RoomStatusEnum } from 'app/shared/model/enumerations/room-status.model';
import { Swiper, SwiperSlide } from 'swiper/react';
import { FreeMode, Navigation, Thumbs, Virtual, Zoom } from 'swiper';
import SliderPrevButton from 'app/entities/room/components/sliderPrevButton';
import SlideNextButton from 'app/entities/room/components/sliderNextButton';
import { limitText } from 'app/shared/util/string-utils';
import { Address } from 'app/components/address';
import { getEntity as getUserInfo } from 'app/entities/user-info/user-info.reducer';
import StarRatings from 'react-star-ratings';
import { createEntity, getEntity as getRatingRoomEntity } from 'app/entities/rating/rating-room.reducer';
import { AvFeedback, AvField, AvForm, AvGroup, AvInput } from 'availity-reactstrap-validation';
import { convertDateTimeToServer, displayDefaultDateTime } from 'app/shared/util/date-utils';
import { DEFAULT_IMAGE_PATH } from 'app/config/constants';
import { IRating } from 'app/shared/model/rating.model';
import { RatingStatus } from 'app/shared/model/enumerations/rating-status.model';
import { RatingAverage } from 'app/components/rating-average';
import FullCalendar from '@fullcalendar/react';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import listPlugin from '@fullcalendar/list';
import moment from 'moment';

export interface IBookingDetailProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}

export const MyRoomDetail = (props: IBookingDetailProps) => {
  const history = useHistory();
  const [thumbsSwiper, setThumbsSwiper] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [newRating, setNewRating] = useState(5);
  const [valueRating, setvalueRating] = useState<IRating>();
  const [showMoreRating, setShowMoreRating] = useState(false);
  const itemsToShowRating = showMoreRating ? 6 : 4;
  const [dateTime, setDateTime] = useState({
    startDate: '',
    endDate: ''
  });
  const handleRatingChange = (updateRating) => {
    setNewRating(updateRating);
  };

  const { bookingEntity, userInfoEntity, learnerId, updateSuccess, roomRatingEntity, bookingRooms } = props;

  useEffect(() => {
    Promise.all([
      props.getEntity(props.match.params.id)
    ]).then(([response]) => {
      if (response) {
        props.getUserInfo(response['value'].data.room.place.landlordId);
        props.getRatingRoomEntity(response['value'].data.room.id);
        props.getBookingRooms(response['value'].data.room.id);
      }
    });
  }, [updateSuccess]);

  if (props.bookingEntity.learnerId === null) {
    history.push(`/room`);
  }
  useEffect(() => {
    for (let i = 0; i < roomRatingEntity?.ratingRooms?.length; i++) {
      const rating = roomRatingEntity?.ratingRooms[i];
      if (rating.userInfo.id === learnerId && rating.type === RatingStatus.RATE_ROOM) {
        setvalueRating(rating);
        setModalOpen(false);
      }
    }
  }, [roomRatingEntity]);

  useEffect(()=>{
    if (bookingRooms.length > 0) {
      const earliestStartDate = bookingRooms.reduce((earliest, booking) => {
        const startDate = new Date(booking.startDate);
        return startDate < earliest ? startDate : earliest;
      }, new Date(bookingRooms[0].startDate));

      const latestEndDate = bookingRooms.reduce((latest, booking) => {
        const endDate = new Date(booking.endDate);
        return endDate > latest ? endDate : latest;
      }, new Date(bookingRooms[0].endDate));
      setDateTime({
        startDate: moment(earliestStartDate).utc().format('DD/MM/YYYY'),
        endDate: moment(latestEndDate).utc().format('DD/MM/YYYY')
      });
    }
  },[bookingRooms]);

  const toggleModal = () => {
    setModalOpen(!modalOpen);
  };

  const handleSubmit = (event, errors, values) => {
    values.createdAt = convertDateTimeToServer(values.createdAt);
    values.rate = newRating;
    if (errors.length === 0) {
      const entity = {
        ...values
      };
      props.createEntity(entity);
      setModalOpen(!modalOpen);
    }
  };
  return (
    <>
      <Row>
        <Col lg="4">
          <div className="iq-card">
            <div className="iq-card-body pl-0 pr-0 pt-0">
              <div className="doctor-details-block">
                <div className="doc-profile-bg bg-primary"/>
                <div className="doctor-profile text-center">
                  <div className="image-container logo">
                    {bookingEntity.room?.photos?.[0]?.imageContentType ?
                      <img
                        className="avatar-130 img-fluid" style={{ border: 'none', borderRadius: '50%' }}
                        src={`data:${bookingEntity.room?.photos?.[0]?.imageContentType};base64,${bookingEntity.room?.photos?.[0]?.image}`}
                        alt=""/>
                      : <img className="avatar-130 img-fluid iq-border-radius-20" src={DEFAULT_IMAGE_PATH}
                             alt="Hình ảnh phòng học"/>
                    }
                  </div>
                </div>
                <div className="text-center mt-3 pl-3 pr-3">
                  <h3 className="mb-2">{bookingEntity.room?.name}</h3>
                </div>
                <hr/>
                <ul className="doctoe-sedual d-flex align-items-center justify-content-between p-0 m-0">
                  <li className="text-center">
                    <h4 className="pl-2">
                      <b>{roomRatingEntity.ratingRoomAvg ? roomRatingEntity.ratingRoomAvg?.toFixed(1) : 0}</b>
                    </h4>
                    <RatingAverage averageRating={roomRatingEntity.ratingRoomAvg ? roomRatingEntity.ratingRoomAvg?.toFixed(1) : 0}/>
                  </li>
                  <li className="text-center">
                    <h4 className="counter"><b>{roomRatingEntity.ratingRoomCount ? roomRatingEntity.ratingRoomCount : 0}</b></h4>
                    <span><Translate contentKey="f2FServerApp.ratingCenterRoom.rating">Rating</Translate></span>
                  </li>
                </ul>
              </div>
            </div>
          </div>
          <div className="iq-card">
            <div className="iq-card-header d-flex justify-content-between">
              <div className="iq-header-title">
                <h4 className="card-title"><Translate contentKey="f2FServerApp.centerRoom.Information">Room Information</Translate></h4>
              </div>
            </div>
            <div className="iq-card-body">
              <div className="about-info m-0 p-0">
                <div className="row">
                  <div className="col-4">
                    <Translate contentKey="f2FServerApp.centerRoom.status">Status</Translate>:
                  </div>
                  <div className="col-8">
                    <dd>
                      <Badge color={bookingEntity.room?.status === RoomStatusEnum.OPEN ? 'success' : 'danger'}>
                        {bookingEntity.room?.status}
                      </Badge>
                    </dd>
                  </div>
                  <div className="col-4">
                    <Translate contentKey="f2FServerApp.booking.startDate">startDate</Translate>:
                  </div>
                  <div className="col-8">
                    {dateTime.startDate}
                  </div>
                  <div className="col-4">
                    <Translate contentKey="f2FServerApp.booking.endDate">endDate</Translate>:
                  </div>
                  <div className="col-8">
                    {dateTime.endDate}
                  </div>
                  <div className="col-4">
                    <Translate contentKey="f2FServerApp.booking.tutor">Gia sư</Translate>:
                  </div>
                  <div className="col-8">
                    <dd>{bookingEntity.tutor?.userInfo?.user?.login}</dd>
                  </div>
                  <div className="col-4">
                    <Translate contentKey="f2FServerApp.centerRoom.location">Location</Translate>:
                  </div>
                  <div className="col-8">
                    <dd>{bookingEntity.room?.location}</dd>
                  </div>
                  <div className="col-4">
                    <Translate contentKey="f2FServerApp.centerRoom.place">Place</Translate>:
                  </div>
                  <div className="col-8">
                    <dd>{bookingEntity.room?.place?.name}</dd>
                  </div>
                  <div className="col-4">
                    <Translate contentKey="f2FServerApp.centerRoom.description">Description</Translate>:
                  </div>
                  <div className="col-8">
                    <dd>{limitText(bookingEntity.room?.description, 200)}</dd>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="iq-card">
            <div className="iq-card-header d-flex justify-content-between">
              <div className="iq-header-title">
                <h4 className="card-title"><Translate contentKey="f2FServerApp.landlord.Information">Landlord Information</Translate></h4>
              </div>
            </div>
            <div className="iq-card-body">
              <div className="about-info m-0 p-0">
                <div className="row">
                  <div className="col-4">
                    <Translate contentKey="userManagement.firstName">First Name</Translate>:
                  </div>
                  <div className="col-8">{userInfoEntity.user?.firstName}</div>
                  <div className="col-4">
                    <Translate contentKey="userManagement.lastName">Last Name</Translate>:
                  </div>
                  <div className="col-8">{userInfoEntity.user?.lastName}</div>
                  <div className="col-4">
                    <Translate contentKey="userManagement.dob">Birthday</Translate>:
                  </div>
                  <div className="col-8">{userInfoEntity.dob}</div>
                  <div className="col-4">
                    <Translate contentKey="userManagement.email">Email</Translate>:
                  </div>
                  <div className="col-8">
                    <a href="mailto:biniJets24@demo.com">{userInfoEntity.user?.email} </a>
                  </div>
                  <div className="col-4">
                    <Translate contentKey="userManagement.phone">Phone</Translate>:
                  </div>
                  <div className="col-8">
                    <a href="tel:001-2351-25612">{userInfoEntity.phone}</a>
                  </div>
                  <div className="col-4">
                    <Translate contentKey="userManagement.address">Address</Translate>:
                  </div>
                  <div className="col-8">
                    <Address ward={userInfoEntity.ward} />
                  </div>
                  <div className="col-4">
                    <Translate contentKey="userManagement.location">Location</Translate>:
                  </div>
                  <div className="col-8">
                    {userInfoEntity.address}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </Col>
        <Col md="8">
          <div className="col-12 mb-3">
            <FullCalendar
              plugins={[dayGridPlugin, timeGridPlugin, listPlugin]}
              headerToolbar={{
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'
              }}
              initialView="dayGridMonth"
              timeZone="Asia/Ho_Chi_Minh"
              events={bookingRooms && bookingRooms.length && bookingRooms.map(booking => ({
                title: booking.room?.name,
                start: moment(booking.startDate).utc().format(),
                end: moment(booking.endDate).utc().format()
              }))}
            />
          </div>
        {bookingEntity.room?.photos && bookingEntity.room?.photos?.length > 0 ?
            <Row>
              <div className="col-md-12">
                <div className="iq-card">
                  <div className="iq-card-header d-flex justify-content-between">
                    <div className="iq-header-title">
                      <h4 className="card-title"><Translate contentKey="f2FServerApp.centerRoom.pictures">Pictures of the classroom</Translate></h4>
                    </div>
                  </div>
                  <div className="iq-card-body">
                    <Swiper
                      spaceBetween={20}
                      centeredSlides={true}
                      virtual
                      zoom={true}
                      thumbs={{ swiper: thumbsSwiper }}
                      modules={[Zoom, FreeMode, Navigation, Virtual, Thumbs]}
                      className="mySwiper2"
                    >
                      {bookingEntity.room?.photos
                        ? bookingEntity.room?.photos.map((val, i) => {
                          return (
                            <SwiperSlide key={val.id}>
                              <SliderPrevButton isDisable={i === 0}/>
                              <div className="image ">
                                <div className="swiper-zoom-container">
                                  <img src={`data:${val.imageContentType};base64,${val.image}`} alt=""/>
                                </div>
                              </div>
                              <SlideNextButton isDisable={i === bookingEntity.room?.photos?.length - 1}/>
                            </SwiperSlide>
                          );
                        })
                        : null}
                    </Swiper>
                    <Swiper
                      onSwiper={setThumbsSwiper}
                      spaceBetween={10}
                      slidesPerView={4}
                      freeMode={true}
                      watchSlidesProgress={true}
                      modules={[FreeMode, Navigation, Thumbs]}
                      className="mySwiper">
                      {bookingEntity.room.photos
                        ? bookingEntity.room.photos.map((val, i) => {
                          return (
                            <SwiperSlide key={val.id}>
                              <div className="image-thumbs ">
                                <img src={`data:${val.imageContentType};base64,${val.image}`} alt=""/>
                              </div>
                            </SwiperSlide>
                          );
                        })
                        : null}
                    </Swiper>
                  </div>
                </div>
              </div>
            </Row>
          : null}
          <div className="col-md-12">
            <div className="iq-card">
              <div className="iq-card-header d-flex justify-content-between">
                <div className="iq-header-title">
                  <Translate contentKey="f2FServerApp.ratingCenterRoom.detail.title">Rating Room</Translate>
                </div>
              </div>
              <div className="iq-card-body">
                <div className="d-flex align-items-center mt-4 border-bottom">
                  <h3 className="pl-3">
                    <b>{roomRatingEntity.ratingRoomAvg ? roomRatingEntity.ratingRoomAvg?.toFixed(1) : 0}</b>
                  </h3>
                  <div className="ml-3 pl-3 border-left pr-3 pb-2">
                    <RatingAverage
                      averageRating={roomRatingEntity.ratingRoomAvg ? roomRatingEntity.ratingRoomAvg : 0}/>
                    <div className="d-block">
                      <span>({roomRatingEntity.ratingRoomCount ? roomRatingEntity.ratingRoomCount : 0}&nbsp;
                      <Translate contentKey="f2FServerApp.ratingCenterRoom.rating">Rating</Translate>)</span>
                    </div>
                  </div>
                </div>
                <div className="mt-4">
                  {roomRatingEntity.ratingRooms && roomRatingEntity.ratingRooms.length > 0 ? roomRatingEntity.ratingRooms
                      .slice(0, itemsToShowRating)
                      .map((rating, index) => (
                        <Row className="mt-3 pt-2 pb-2" key={index}>
                          <Col md={2} className="text-center">
                            <img
                              src={`data:${rating.userInfo?.avatarContentType};base64,${rating?.userInfo?.avatar}`}
                              className='rounded-circle iq-card-icon'/>
                            <span className="text-center">
                                <div className="user-name">
                                  <small><strong>{rating.userInfo?.user.login}</strong></small>
                                </div>
                            </span>
                          </Col>
                          <Col md={9}>
                            <div className="d-flex">
                              <FontAwesomeIcon icon="star" className={rating.rate > 0 ? 'text-warning' : ''}/>
                              <FontAwesomeIcon icon="star" className={rating.rate > 1 ? 'text-warning' : ''}/>
                              <FontAwesomeIcon icon="star" className={rating.rate > 2 ? 'text-warning' : ''}/>
                              <FontAwesomeIcon icon="star" className={rating.rate > 3 ? 'text-warning' : ''}/>
                              <FontAwesomeIcon icon="star" className={rating.rate > 4 ? 'text-warning' : ''}/>
                            </div>
                            <p>
                              {rating.comment}
                            </p>
                          </Col>
                        </Row>))
                    : <Translate contentKey="f2FServerApp.ratingCenterRoom.notRating"> Not Rating Room</Translate>}
                  {roomRatingEntity.ratingRooms && roomRatingEntity.ratingRooms.length > 0 &&
                    roomRatingEntity.ratingRooms.length > itemsToShowRating &&
                    <Button outline color="info" onClick={() => setShowMoreRating(!showMoreRating)}>
                      {showMoreRating ? 'Show less' : 'Show more'}
                    </Button>
                  }
                </div>
              </div>
            </div>
          </div>
        </Col>
      </Row>
      <Row>
        <Col>
          <Button color="info" onClick={() => props.history.goBack()} className="mb-3 mr-3">
            <FontAwesomeIcon icon="arrow-left"/> <span className="d-none d-md-inline">Back</span>
          </Button>
          { dateTime && moment(dateTime?.endDate).isAfter(moment()) ?
              <Button onClick={toggleModal} color="info" className="mb-3 ml-1">
                <FontAwesomeIcon icon="star"/> <span className="d-none d-md-inline">Rating</span>
              </Button> : null
          }
        </Col>
      </Row>
      <div>
        {bookingEntity?.room?.status === RoomStatus.CLOSE &&
        <Modal isOpen={modalOpen} toggle={toggleModal}>
          <ModalHeader
            toggle={toggleModal}>{valueRating ? 'PHÒNG HỌC ĐÃ ĐƯỢC ĐÁNH GIÁ' : 'PHÒNG HỌC ĐÃ HẾT HẠN. VUI LÒNG ĐÁNH GIÁ PHÒNG HỌC'} </ModalHeader>
          <ModalBody>
            <AvForm onSubmit={handleSubmit}>
              <AvGroup>
                <Label id="commentLabel" for="rating-comment">
                  Comment: &nbsp;
                </Label>
                {valueRating ?
                  <p>
                    {valueRating?.comment}
                  </p>
                  :
                  <AvField id="rating-comment" type="text" name="comment"/>
                }
              </AvGroup>
              <AvGroup>
                <Label id="rateLabel" for="rating-rate">
                  Rate
                </Label>
                {valueRating ?
                  <StarRatings
                    className="d-flex align-content-center justify-center"
                    starRatedColor="orange"
                    starHoverColor="orange"
                    numberOfStars={5}
                    starDimension="65px"
                    starSpacing="15px"
                    name="rate"
                    rating={valueRating?.rate}
                  />
                  :
                  <StarRatings
                    className="d-flex align-content-center justify-center"
                    rating={newRating}
                    starRatedColor="orange"
                    starHoverColor="orange"
                    numberOfStars={5}
                    starDimension="65px"
                    starSpacing="15px"
                    changeRating={handleRatingChange}
                    name="rate"
                    value={newRating}
                  />
                }
              </AvGroup>
              <AvGroup>
                <AvInput
                  id="rating-type"
                  type="hidden"
                  className="form-control"
                  name="type"
                  value={RatingStatus.RATE_ROOM}
                />
              </AvGroup>
              <AvGroup>
                <AvInput
                  id="rating-createdAt"
                  type="hidden"
                  className="form-control"
                  name="createdAt"
                  placeholder={'YYYY-MM-DD HH:mm'}
                  value={displayDefaultDateTime()}
                />
              </AvGroup>
              <AvGroup>
                <AvInput id="rating-userInfo" type="hidden" className="form-control" name="userInfoId" required
                         value={bookingEntity.learnerId}/>
                <AvFeedback>This field is required.</AvFeedback>
              </AvGroup>
              <AvGroup>
                <AvInput id="rating-room" type="hidden" className="form-control" name="roomId" required
                         value={bookingEntity.roomId}/>
                <AvFeedback>This field is required.</AvFeedback>
              </AvGroup>
              {!valueRating ?
                <Button color="primary" id="save-entity" type="submit">
                  <FontAwesomeIcon icon="save"/>
                  &nbsp; Save
                </Button>
                : ' '}
            </AvForm>
          </ModalBody>
        </Modal>
        }
      </div>
    </>
  );
};

const mapStateToProps = ({ myRoom, userInfo, authentication, ratingRoom }: IRootState) => ({
  bookingEntity: myRoom.entity,
  userInfoEntity: userInfo.entity,
  learnerId: authentication.account.id,
  updateSuccess: ratingRoom.updateSuccess,
  roomRatingEntity: ratingRoom.entity,
  bookingRooms: myRoom.bookingRooms
});

const mapDispatchToProps = { getEntity, getUserInfo, createEntity, getRatingRoomEntity, getBookingRooms };

type StateProps = ReturnType<typeof mapStateToProps>;
type DispatchProps = typeof mapDispatchToProps;

export default connect(mapStateToProps, mapDispatchToProps)(MyRoomDetail);
